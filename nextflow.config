process {
   container = 'registry.gitlab.com/mfurla/nanoid/master:latest'
   cpus = 5 //1
   memory = 14.GB //1.GB
   executor = 'k8s'//'pbspro'
   // queue = 'workq'
   scratch = false
   accelerator = 0
   perJobMemLimit = true
   // errorStrategy = 'retry' 

   withName:fastqExtraction{
    cpus = {5 - (task.attempt-1)}
    errorStrategy = "retry" 
    maxRetries = 4
   // errorStrategy = { task.exitStatus == 137 ? "retry" : "terminate" }
   }

   withName:minimap2{
    cpus = {5 - (task.attempt-1)}
    errorStrategy = "retry" 
    maxRetries = 4
   // errorStrategy = { task.exitStatus == 137 ? "retry" : "terminate" }
   }

   withName:readExtraction{
    cpus = {5 - (task.attempt-1)}
    errorStrategy = "retry" 
    maxRetries = 4
   // errorStrategy = { task.exitStatus == 137 ? "retry" : "terminate" }
   }
   
   withName:sequencingSummary {
    cpus = {5 - (task.attempt-1)}
    errorStrategy = "retry" 
    maxRetries = 4
   // errorStrategy = { task.exitStatus == 137 ? "retry" : "terminate" }
   }

   withName:alignmentReconstruction {
    cpus = {5 - (task.attempt-1)}
    errorStrategy = "retry" 
    maxRetries = 4
   // errorStrategy = { task.exitStatus == 137 ? "retry" : "terminate" }
   }

   withName:fivemerAlignmentReconstruction {
    cpus = {5 - (task.attempt-1)}
    errorStrategy = "retry" 
    maxRetries = 4
   // errorStrategy = { task.exitStatus == 137 ? "retry" : "terminate" }
   }

   withName:mismatchReadIdentification{
    cpus = {5 - (task.attempt-1)}
    errorStrategy = "retry" 
    maxRetries = 4
   // errorStrategy = { task.exitStatus == 137 ? "retry" : "terminate" }
   }

   withName:traceModel {
    cpus = {5 - (task.attempt-1)}
    errorStrategy = "retry" 
    maxRetries = 4
   // errorStrategy = { task.exitStatus == 137 ? "retry" : "terminate" }
   }

   withName:traceModelAddOn {
    cpus = {5 - (task.attempt-1)}
    errorStrategy = "retry" 
    maxRetries = 4
   // errorStrategy = { task.exitStatus == 137 ? "retry" : "terminate" }
   }

   withName:rawSignal{
    cpus = {5 - (task.attempt-1)}
    errorStrategy = "retry" 
    maxRetries = 4
   // errorStrategy = { task.exitStatus == 137 ? "retry" : "terminate" }
   }

   withName:rawSignalFiveMers{
    cpus = {5 - (task.attempt-1)}
    errorStrategy = "retry"
    maxRetries = 4
   // errorStrategy = { task.exitStatus == 137 ? "retry" : "terminate" }
   }

   withName:rawSignalFiveMersAddOn{
    cpus = {5 - (task.attempt-1)}
    errorStrategy = "retry"
    maxRetries = 4
   // errorStrategy = { task.exitStatus == 137 ? "retry" : "terminate" }
   }
}

docker {
   enabled = true
   autoMounts = true
}

params {
   FASTQ = '/workspace/ieo4032/guppy_5EU_0h_25c_C/FASTQ'

   fastqExtraction = 'true'
   minimap2 = 'true'
   alignmentExtraction = 'true'
   readExtraction = 'true'
   sequencingSummary = 'true'
   alignmentReconstruction = 'true'
   fivemerAlignmentReconstruction = 'true'
   mismatchReadIdentification = 'true'
   traceModel = 'true'
   traceModelAddOn = 'true'
   rawSignal = 'true'
   rawSignalFiveMers = 'true'
   rawSignalFiveMersAddOn = 'true'
   dataFormatting = 'false'
}

runName = 'nanoid'

k8s {
   storageClaimName = 'nfs-minsalute-ieo'
}
